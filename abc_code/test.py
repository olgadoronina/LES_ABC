import unittest
import numpy as np
import abc_code.utils as utils

x = np.empty((20, 4))
x[0] = [-0.008530251681804657, -0.08408182859420776, 0.06994745135307312, 0.09903451055288315]
x[1] = [0.038589686155319214, -0.11337749660015106, 0.014453362673521042, -0.054361842572689056]
x[2] = [0.048167891800403595, -0.13428418338298798, 0.09040987491607666, 0.05298098549246788]
x[3] = [-0.03207699581980705, -0.07853265106678009, 0.050000689923763275, 0.09390111267566681]
x[4] = [-0.041800156235694885, -0.06906546652317047, 0.03354087099432945, 0.06753683090209961]
x[5] = [0.04992697015404701, 0.027819644659757614, 0.04959839582443237, 0.043473318219184875]
x[6] = [-0.00504198158159852, 0.018265249207615852, 0.11162738502025604, 0.12057843804359436]
x[7] = [0.03120575286448002, -0.047400157898664474, 0.11809927970170975, 0.0952790156006813]
x[8] = [0.02906123735010624, 0.015105093829333782, 0.14924690127372742, 0.09543590247631073]
x[9] = [0.03324555978178978, 0.06446231156587601, 0.13776159286499023, 0.06830199062824249]
x[10] = [-0.020317809656262398, 0.049054697155952454, 0.15973587334156036, 0.058554910123348236]
x[11] = [-0.0008530409540981054, 0.0691138505935669, 0.17834025621414185, 0.04411807283759117]
x[12] = [-0.004443860147148371, 0.019318385049700737, 0.13774769008159637, 0.06491681188344955]
x[13] = [-0.05255555361509323, 0.03354373946785927, 0.07481258362531662, 0.025315674021840096]
x[14] = [-0.06567477434873581, 0.07233450561761856, 0.04133898764848709, 0.08518745750188828]
x[15] = [-0.06042340025305748, 0.015707068145275116, 0.05600094795227051, 0.16706238687038422]
x[16] = [0.0047783562913537025, -0.04407056048512459, 0.06767045706510544, 0.05743267759680748]
x[17] = [0.06240348145365715, -0.0815785601735115, 0.10707533359527588, 0.05891482159495354]
x[18] = [0.02768724411725998, -0.10128718614578247, 0.05868964269757271, 0.10631994903087616]
x[19] = [0.03444235399365425, -0.0335426889359951, -0.013413992710411549, -0.06604451686143875]


class MyTestCase(unittest.TestCase):
    def test_covariance(self):
        s_d = 2.4**2/3
        cov_matrix_3 = s_d * np.cov(x[:3].T)
        mean_3 = np.mean(x[:3], axis=0)
        for t_plus1 in range(4, 20):

            cov_matrix_0 = s_d * np.cov(x[:t_plus1].T)
            mean_prev = np.mean(x[:t_plus1 - 1], axis=0)

            np.testing.assert_allclose(mean_prev, mean_3, rtol=1e-10, atol=1e-10)

            cov_prev = s_d * np.cov(x[:t_plus1 - 1].T)
            cov_matrix_2, _ = utils.covariance_recursive(x[t_plus1 - 1], t_plus1 - 1, cov_prev, mean_prev, s_d)
            cov_matrix_3, mean_3 = utils.covariance_recursive(x[t_plus1 - 1], t_plus1 - 1, cov_matrix_3, mean_3, s_d)

            np.testing.assert_allclose(cov_matrix_0, cov_matrix_2, rtol=1e-10, atol=1e-10)
            np.testing.assert_allclose(cov_matrix_0, cov_matrix_3, rtol=1e-10, atol=1e-10)


if __name__ == '__main__':
    unittest.main()
